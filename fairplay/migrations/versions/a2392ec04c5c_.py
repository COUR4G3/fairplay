"""empty message

Revision ID: a2392ec04c5c
Revises: 
Create Date: 2023-09-22 14:35:46.457808

"""
from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql

from fairplay.audit import AuditEvent
from fairplay.auth.models import User

# revision identifiers, used by Alembic.
revision = "a2392ec04c5c"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS btree_gist")
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm")
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')

    op.create_table(
        "users",
        sa.Column(
            "name",
            sa.String(),
            sa.Computed("name_first || ' ' || name_last", persisted=True),
            nullable=False,
        ),
        sa.Column("name_first", sa.String(), nullable=False),
        sa.Column("name_last", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("sanitized_email", sa.String(), nullable=True),
        sa.Column("password", sa.String(), nullable=True),
        sa.Column(
            "active", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column(
            "default_tz", sqlalchemy_utils.types.timezone.TimezoneType(), nullable=False
        ),
        sa.Column("lang", sqlalchemy_utils.types.locale.LocaleType(), nullable=False),
        sa.Column(
            "role",
            sqlalchemy_utils.types.choice.ChoiceType(User.ROLE_CHOICES),
            server_default="user",
            nullable=False,
        ),
        sa.Column("last_login_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            server_default=sa.text("uuid_generate_v1()"),
            nullable=False,
        ),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("sanitized_email", name="uq_users_sanitized_email"),
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(
            "ix_users_email",
            ["email"],
            unique=False,
            postgresql_using="gin",
            postgresql_ops={"email": "gin_trgm_ops"},
        )
        batch_op.create_index(
            "ix_users_inactive",
            ["active"],
            unique=False,
            postgresql_where="active IS false",
        )
        batch_op.create_index(
            "ix_users_locale", ["lang"], unique=False, postgresql_using="brin"
        )
        batch_op.create_index(
            "ix_users_name",
            ["name"],
            unique=False,
            postgresql_using="gin",
            postgresql_ops={"name": "gin_trgm_ops"},
        )

    op.create_table(
        "audit",
        sa.Column(
            "id",
            sqlalchemy_utils.types.uuid.UUIDType(),
            server_default=sa.text("uuid_generate_v1()"),
            nullable=False,
        ),
        sa.Column(
            "date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "category",
            sqlalchemy_utils.types.choice.ChoiceType(AuditEvent.CATEGORY_CHOICES),
            nullable=False,
        ),
        sa.Column("event", sa.String(), nullable=False),
        sa.Column("message", sa.String(), nullable=True),
        sa.Column(
            "context",
            sqlalchemy_utils.types.json.JSONType().with_variant(
                postgresql.JSONB(astext_type=sa.Text()), "postgresql"
            ),
            nullable=True,
        ),
        sa.Column("record_model", sa.String(), nullable=True),
        sa.Column("record_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column(
            "remote_addr",
            sqlalchemy_utils.types.ip_address.IPAddressType(length=50).with_variant(
                postgresql.INET(), "postgresql"
            ),
            nullable=True,
        ),
        sa.Column("request_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column("user_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column(
            "created_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="set null"),
        sa.PrimaryKeyConstraint("date", "id", name="pk_audit_date_id"),
        postgresql_partition_by="RANGE (date)",
    )
    with op.batch_alter_table("audit", schema=None) as batch_op:
        batch_op.create_index(
            "ix_audit_category_event", ["category", "event"], unique=False
        )
        batch_op.create_index(
            "ix_audit_context",
            ["context"],
            unique=False,
            postgresql_using="gin",
            postgresql_ops={"context": "jsonb_ops"},
        )
        batch_op.create_index(
            "ix_audit_date", ["date"], unique=False, postgresql_using="brin"
        )
        batch_op.create_index(
            "ix_audit_message",
            ["message"],
            unique=False,
            postgresql_using="gin",
            postgresql_ops={"message": "gin_trgm_ops"},
        )
        batch_op.create_index(
            "ix_audit_record", ["record_model", "record_id"], unique=False
        )
        batch_op.create_index(
            "ix_audit_remote_addr",
            ["remote_addr"],
            unique=False,
            postgresql_using="gist",
            postgresql_ops={"remote_addr": "gist_inet_ops"},
        )
        batch_op.create_index("ix_audit_request", ["request_id"], unique=False)
        batch_op.create_index("ix_audit_user", ["user_id"], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("audit", schema=None) as batch_op:
        batch_op.drop_index("ix_audit_user")
        batch_op.drop_index("ix_audit_request")
        batch_op.drop_index(
            "ix_audit_remote_addr",
            postgresql_using="gist",
            postgresql_ops={"remote_addr": "gist_inet_ops"},
        )
        batch_op.drop_index("ix_audit_record")
        batch_op.drop_index(
            "ix_audit_message",
            postgresql_using="gin",
            postgresql_ops={"message": "gin_trgm_ops"},
        )
        batch_op.drop_index("ix_audit_date", postgresql_using="brin")
        batch_op.drop_index(
            "ix_audit_context",
            postgresql_using="gin",
            postgresql_ops={"context": "jsonb_ops"},
        )
        batch_op.drop_index("ix_audit_category_event")

    op.drop_table("audit")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(
            "ix_users_name",
            postgresql_using="gin",
            postgresql_ops={"name": "gin_trgm_ops"},
        )
        batch_op.drop_index("ix_users_locale", postgresql_using="brin")
        batch_op.drop_index("ix_users_inactive", postgresql_where="active IS false")
        batch_op.drop_index(
            "ix_users_email",
            postgresql_using="gin",
            postgresql_ops={"email": "gin_trgm_ops"},
        )

    op.drop_table("users")
    # ### end Alembic commands ###
